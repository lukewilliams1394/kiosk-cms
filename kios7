#!/bin/bash
# Ubuntu 24.04.3 → Microsoft Edge Kiosk with Splash & Offline Pages
# Run as root

set -e

echo "=== Updating system ==="
apt update && apt upgrade -y

echo "=== Installing required packages ==="
apt install --no-install-recommends -y \
    xorg openbox xinit dbus-x11 pulseaudio alsa-utils \
    curl wget nano systemd-cron espeak espeak-ng xdg-utils x11-xserver-utils

echo "=== Adding Microsoft Edge repository ==="
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" \
    > /etc/apt/sources.list.d/microsoft-edge.list
apt update
apt install microsoft-edge-stable -y
rm microsoft.gpg

echo "=== Disabling network-wait ==="
systemctl disable systemd-networkd-wait-online.service
systemctl mask systemd-networkd-wait-online.service

echo "=== Creating kiosk user ==="
if ! id "kiosk" &>/dev/null; then
    adduser kiosk --gecos "" --disabled-password
fi

echo "=== Enabling auto-login ==="
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat >/etc/systemd/system/getty@tty1.service.d/override.conf <<'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin kiosk --noclear %I $TERM
Type=idle
EOF
systemctl daemon-reexec
systemctl daemon-reload

echo "=== Setting up kiosk environment ==="
su - kiosk -s /bin/bash <<'EOF'
set -e

mkdir -p ~/kiosk_assets

# --- Splash Screen ---
cat > ~/kiosk_splash.html <<'EOL'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Loading</title>
<style>
html,body {
  height:100%; width:100%; margin:0;
  background:#000; color:#3055A0;
  display:flex; align-items:center; justify-content:center;
  font-family:Arial,Helvetica,sans-serif;
  flex-direction:column; overflow:hidden;
}
h1 { font-size:2.5rem; margin-bottom:20px; }
.loader { display:flex; gap:10px; }
.dot {
  width:14px; height:14px; border-radius:50%;
  background:#3055A0; animation:bounce 1.2s infinite ease-in-out;
}
.dot:nth-child(2){animation-delay:.2s}
.dot:nth-child(3){animation-delay:.4s}
@keyframes bounce {
  0%,80%,100%{transform:scale(0)}
  40%{transform:scale(1)}
}
.fadeout { opacity:0; transition:opacity 0.8s ease; }
</style>
</head>
<body>
<h1>Loading Scanning Station</h1>
<div class="loader"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div>
<script>
setTimeout(()=>{
  document.body.classList.add('fadeout');
  setTimeout(()=>window.close(),800);
},2500);
</script>
</body>
</html>
EOL

# --- Offline Screen ---
cat > ~/kiosk_offline.html <<'EOL'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Network Disconnected</title>
<style>
html,body {
  height:100%; width:100%; margin:0; padding:0;
  background:#000; color:#3055A0;
  font-family:Arial,Helvetica,sans-serif;
  overflow:hidden; display:flex; align-items:center;
  justify-content:center; flex-direction:column;
  transition:opacity 0.8s ease,transform 0.8s ease;
}
h1 { font-size:2.4rem; margin-bottom:10px; }
#timer { color:#fff; font-size:1.1rem; }
.progress {
  width:350px; max-width:90%; height:12px;
  background:#111; border-radius:8px; overflow:hidden;
  margin-top:22px; box-shadow:inset 0 0 8px rgba(0,0,0,0.6);
}
.bar {
  height:100%; width:0%;
  background:linear-gradient(90deg,#3055A0,#5078C8);
  transition:width 1s linear;
}
.hint { margin-top:20px; color:#999; font-size:0.9rem; }
.hidden { opacity:0; transform:translateY(5%); }
</style>
</head>
<body>
  <h1>Network Disconnected</h1>
  <div id="timer">Rechecking network in 10s…</div>
  <div class="progress"><div id="bar" class="bar"></div></div>
  <div class="hint">The station will retry automatically.</div>
<script>
const RETRY_INTERVAL = 10;
let remaining = RETRY_INTERVAL;
const timer=document.getElementById('timer');
const bar=document.getElementById('bar');
function updateUI(){
  timer.textContent=`Rechecking network in ${remaining}s…`;
  bar.style.width=((RETRY_INTERVAL-remaining)/RETRY_INTERVAL*100)+'%';
}
async function checkOnline(){
  if(navigator.onLine===false) return false;
  try{
    const ctrl=new AbortController();
    const t=setTimeout(()=>ctrl.abort(),3000);
    await fetch("https://dns.google/resolve?name=example.com",{signal:ctrl.signal,cache:"no-store"});
    clearTimeout(t); return true;
  }catch{return false;}
}
function fadeOutAndClose(){
  document.body.classList.add('hidden');
  setTimeout(()=>window.close(),900);
}
function startCountdown(){
  updateUI();
  const tick=setInterval(async()=>{
    remaining--; updateUI();
    if(remaining<=0){
      clearInterval(tick);
      if(await checkOnline()) fadeOutAndClose();
      else {remaining=RETRY_INTERVAL; startCountdown();}
    }
  },1000);
}
window.addEventListener('online',async()=>{if(await checkOnline())fadeOutAndClose();});
startCountdown();
</script>
</body>
</html>
EOL

# --- X session startup ---
cat > ~/.xinitrc <<'EOC'
#!/bin/bash
xset s off
xset -dpms
xset s noblank
pulseaudio --start
sleep 2
amixer -D pulse sset Master 100% || true

TARGET_URL="http://server02:4040/Tracking/Scanner"
SPLASH_HTML="file:///home/kiosk/kiosk_splash.html"
OFFLINE_HTML="file:///home/kiosk/kiosk_offline.html"

check_network() {
    ping -c1 -W2 8.8.8.8 &>/dev/null && return 0
    ping -c1 -W2 1.1.1.1 &>/dev/null && return 0
    return 1
}

launch_edge() {
    pkill microsoft-edge || true
    microsoft-edge --kiosk "$1" --no-first-run --disable-infobars >/dev/null 2>&1 &
    echo $!
}

show_splash() {
    echo "[KIOSK] Showing splash..."
    PID=$(launch_edge "$SPLASH_HTML")
    wait $PID || true
}

show_offline() {
    echo "[KIOSK] Showing offline..."
    espeak-ng "Attention. The scanning station is offline."
    PID=$(launch_edge "$OFFLINE_HTML")
    wait $PID || true
}

launch_kiosk() {
    echo "[KIOSK] Launching scanner app..."
    microsoft-edge --kiosk "$TARGET_URL" \
        --no-first-run --disable-infobars \
        --autoplay-policy=no-user-gesture-required >/dev/null 2>&1 &
    echo $!
}

while true; do
    show_splash

    if ! check_network; then
        echo "[KIOSK] No network at startup — offline screen"
        show_offline
        continue
    fi

    KIOSK_PID=$(launch_kiosk)
    espeak-ng "Network available, loading scanning station"

    while kill -0 $KIOSK_PID 2>/dev/null; do
        if ! check_network; then
            echo "[KIOSK] Network lost — closing kiosk"
            kill $KIOSK_PID || true
            wait $KIOSK_PID || true
            while ! check_network; do
                show_offline
                sleep 2
            done
            espeak-ng "Network restored. Scanning station live."
            break
        fi
        sleep 5
    done

    echo "[KIOSK] Restarting loop..."
    sleep 3
done
EOC

chmod +x ~/.xinitrc
EOF

echo "=== Setting 1920x1080 display ==="
mkdir -p /etc/X11/xorg.conf.d
cat >/etc/X11/xorg.conf.d/10-monitor.conf <<'EOF'
Section "Monitor"
    Identifier "Monitor0"
    Option "PreferredMode" "1920x1080"
EndSection
Section "Screen"
    Identifier "Screen0"
    Device "Device0"
    Monitor "Monitor0"
    SubSection "Display"
        Modes "1920x1080"
    EndSubSection
EndSection
EOF

echo "=== Adding daily reboot ==="
systemctl mask ctrl-alt-del.target
cat >/etc/cron.d/kiosk-reboot <<'EOF'
0 3 * * * root /sbin/reboot
EOF
chmod 644 /etc/cron.d/kiosk-reboot

echo "=== Kiosk installation complete ==="
echo "System will reboot in 5 seconds..."
sleep 5
reboot
