#!/bin/bash
# Ubuntu 24.04.3 Server → Microsoft Edge Single-Page Kiosk (with Splash + Offline)
# Run as root

set -e

echo "=== Updating system ==="
apt update && apt upgrade -y

echo "=== Installing core packages ==="
apt install --no-install-recommends -y \
    xorg openbox xinit dbus-x11 pulseaudio alsa-utils \
    curl wget nano systemd-cron espeak-ng xdg-utils x11-xserver-utils

echo "=== Adding Microsoft Edge repository and installing Edge ==="
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge.list'
apt update
apt install microsoft-edge-stable -y
rm microsoft.gpg

echo "=== Disabling systemd-networkd-wait-online ==="
systemctl disable systemd-networkd-wait-online.service
systemctl mask systemd-networkd-wait-online.service

# Create kiosk user if missing
if ! id "kiosk" &>/dev/null; then
    adduser kiosk --gecos "" --disabled-password
fi

echo "=== Configuring auto-login ==="
mkdir -p /etc/systemd/system/getty@tty1.service.d
cat >/etc/systemd/system/getty@tty1.service.d/override.conf <<'EOF'
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin kiosk --noclear %I $TERM
Type=idle
EOF
systemctl daemon-reexec
systemctl daemon-reload

echo "=== Setting up kiosk environment for 'kiosk' user ==="
su - kiosk -s /bin/bash <<'EOF'
set -e

# Auto-start X session
cat > ~/.bash_profile <<'EOB'
if [ -z "$DISPLAY" ] && [ "$(tty)" = "/dev/tty1" ]; then
  startx
fi
EOB

# === Splash Screen HTML ===
cat > ~/kiosk_splash.html <<'EOC'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Loading Scanning Station</title>
<style>
html,body{height:100%;width:100%;margin:0;padding:0;background:#000;
font-family:Arial,Helvetica,sans-serif;color:#3055A0;overflow:hidden;}
.container{height:100%;display:flex;align-items:center;justify-content:center;
flex-direction:column;transition:opacity 800ms ease-in-out;opacity:1;}
h1{margin:0 0 24px 0;font-weight:700;font-size:2.25rem;text-align:center;}
.loader{display:flex;gap:12px;}
.loader .dot{width:16px;height:16px;border-radius:50%;background:#3055A0;
transform:scale(0);animation:bounce 1.2s infinite ease-in-out;}
.loader .dot:nth-child(2){animation-delay:.18s;}
.loader .dot:nth-child(3){animation-delay:.36s;}
@keyframes bounce{0%,80%,100%{transform:scale(0);opacity:.25;}
40%{transform:scale(1);opacity:1;}}
.fade-out{opacity:0;pointer-events:none;}
.sub{margin-top:18px;font-size:.95rem;color:#fff;opacity:.8;}
</style>
</head>
<body>
<div id="wrap" class="container">
  <h1>Loading Scanning Station</h1>
  <div class="loader"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div>
  <div class="sub">Preparing application…</div>
</div>
<script>
const SHOW_MS=2500,FADE_MS=800;
function fadeAndClose(){
 document.getElementById('wrap').classList.add('fade-out');
 setTimeout(()=>{try{window.close();}catch{}},FADE_MS+50);
}
setTimeout(fadeAndClose,SHOW_MS);
</script>
</body>
</html>
EOC

# === Offline Screen HTML ===
cat > ~/kiosk_offline.html <<'EOC'
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Network Disconnected</title>
<style>
html,body{height:100%;width:100%;margin:0;padding:0;background:#000;
color:#3055A0;font-family:Arial,Helvetica,sans-serif;overflow:hidden;}
.container{height:100%;display:flex;align-items:center;justify-content:center;
flex-direction:column;transition:opacity .8s ease,transform .8s ease;}
.container.hidden{opacity:0;transform:translateY(5%);}
h1{margin:0 0 10px;font-size:2.4rem;color:#3055A0;
text-shadow:0 0 10px rgba(48,85,160,0.6);}
#timer{margin-top:6px;font-size:1.1rem;color:#fff;opacity:.95;}
.progress{width:350px;max-width:90%;height:12px;background:#111;border-radius:8px;
overflow:hidden;margin-top:22px;box-shadow:inset 0 0 8px rgba(0,0,0,.6);}
.bar{height:100%;width:0;background:linear-gradient(90deg,#3055A0,#5078C8);
transition:width 1s linear;}
.hint{margin-top:20px;color:#999;font-size:.9rem;}
</style>
</head>
<body>
<div id="wrap" class="container">
  <h1>Network Disconnected</h1>
  <div id="timer">Rechecking network in 10s…</div>
  <div class="progress"><div id="bar" class="bar"></div></div>
  <div class="hint">The station will retry automatically.</div>
</div>
<script>
const RETRY_INTERVAL=10;let remaining=RETRY_INTERVAL;
const wrap=document.getElementById('wrap'),timer=document.getElementById('timer'),bar=document.getElementById('bar');
function updateUI(){timer.textContent=`Rechecking network in ${remaining}s…`;
bar.style.width=((RETRY_INTERVAL-remaining)/RETRY_INTERVAL*100)+'%';}
async function checkOnline(){
 if(navigator.onLine===false)return false;
 try{const c=new AbortController();const t=setTimeout(()=>c.abort(),3000);
 await fetch("https://dns.google/resolve?name=example.com",{signal:c.signal,cache:"no-store"});
 clearTimeout(t);return true;}catch{return false;}}
function startCountdown(){
 updateUI();const tick=setInterval(async()=>{
  remaining--;updateUI();
  if(remaining<=0){clearInterval(tick);
   if(await checkOnline()){fadeOutAndClose();}
   else{remaining=RETRY_INTERVAL;startCountdown();}
  }},1000);}
function fadeOutAndClose(){wrap.classList.add('hidden');
 setTimeout(()=>{try{window.close();}catch{}},900);}
window.addEventListener('online',async()=>{if(await checkOnline())fadeOutAndClose();});
startCountdown();
</script>
</body>
</html>
EOC

# === Xinitrc for Kiosk ===
cat > ~/.xinitrc <<'EOC'
#!/bin/bash
xset s off
xset -dpms
xset s noblank

pulseaudio --start
sleep 2
amixer -D pulse sset Master 100% || true

TARGET_URL="http://server02:4040/Tracking/Scanner"
SPLASH_HTML="file:///home/kiosk/kiosk_splash.html"
OFFLINE_HTML="file:///home/kiosk/kiosk_offline.html"

OFFLINE_FLAG=1
ONLINE_FLAG=0
FIRST_CONNECTION=1

while true; do
  while ! ping -c1 -W2 8.8.8.8 &>/dev/null; do
    if [ $OFFLINE_FLAG -eq 0 ]; then
      espeak-ng "Attention. The scanning station is offline."
      OFFLINE_FLAG=1
      ONLINE_FLAG=0
    fi
    pkill microsoft-edge || true
    microsoft-edge --kiosk "$OFFLINE_HTML" --no-first-run --disable-infobars >/dev/null 2>&1 &
    PID=$!
    wait $PID || true
  done

  if [ $FIRST_CONNECTION -eq 1 ]; then
    espeak-ng "Network available, loading scanning station"
    FIRST_CONNECTION=0
  elif [ $ONLINE_FLAG -eq 0 ]; then
    espeak-ng "Network restored. Scanning station live."
    ONLINE_FLAG=1
    OFFLINE_FLAG=0
  fi

  pkill microsoft-edge || true
  microsoft-edge --kiosk "$SPLASH_HTML" --no-first-run --disable-infobars >/dev/null 2>&1 &
  PID=$!
  wait $PID || true

  pkill microsoft-edge || true
  microsoft-edge --kiosk "$TARGET_URL" --no-first-run --disable-infobars \
      --autoplay-policy=no-user-gesture-required >/dev/null 2>&1 &
  EDGE_PID=$!
  while kill -0 $EDGE_PID 2>/dev/null; do sleep 5; done
  echo "Edge crashed or closed. Restarting in 5s..."
  sleep 5
done
EOC

chmod +x ~/.xinitrc
EOF

# Force resolution
mkdir -p /etc/X11/xorg.conf.d
cat >/etc/X11/xorg.conf.d/10-monitor.conf <<'EOF'
Section "Monitor"
    Identifier "Monitor0"
    Option "PreferredMode" "1920x1080"
EndSection
Section "Screen"
    Identifier "Screen0"
    Device "Device0"
    Monitor "Monitor0"
    SubSection "Display"
        Modes "1920x1080"
    EndSubSection
EndSection
EOF

# Hardening & daily reboot
systemctl mask ctrl-alt-del.target
cat >/etc/cron.d/kiosk-reboot <<'EOF'
0 3 * * * root /sbin/reboot
EOF
chmod 644 /etc/cron.d/kiosk-reboot

echo "=== Setup complete. Rebooting in 5 seconds ==="
sleep 5
reboot
